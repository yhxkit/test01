
package com.hb.day170918_multiroom;

import java.awt.*;
import java.io.*;
import java.net.Socket;

import javax.swing.*;

import java.awt.event.*;


public class ChatClient extends JFrame implements Runnable {

	CardLayout card;
	Socket sock;
	String serverIP = "127.0.0.1";
	int port = 9001;

	ObjectInputStream in;
	ObjectOutputStream out;


	Thread thr;
	boolean finish;

	public ChatClient() {
		initComponents(); //the components comes earlier than cardlayout..is this fine?

		// 
		card = (CardLayout) getContentPane().getLayout();

		this.addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				if(sock.isClosed() || !sock.isConnected()){
					System.out.println("window close + socket end!");
					//					System.exit(0);
					dispose(); //what's the difference? this is safer
				}else{
					System.out.println("window closed!");
					finish = true;
					close();
				}
			}

		});
		enter();

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		
		

		//////////////lounge
		p1 = new  JPanel();
		lounge_btns_n_userlist_jPanel = new  JPanel();
		lounge_btns_jPanel = new  JPanel();
		makeRoom_bt = new  JButton();
		enterRoom_bt = new  JButton();
		exit_bt = new  JButton();
		lounge_user_jLabel = new  JLabel();
		namelist_jscrPane = new  JScrollPane();
		jList_name = new  JList();
		roomlist_jPanel = new  JPanel();
		jLabel_roomlist = new JLabel();
		roomlist_jscrPane = new  JScrollPane();
		jList_room = new  JList();
		loungChatPanel = new JPanel();
		loungeChat_ta = new JTextArea();
		loungeChatScrollPane = new JScrollPane();
		loungeChat_tf = new JTextField();
		loungeChatSend_bt = new JButton();
		loungChat_tf_bt_Panel = new JPanel(); 

		////////////////room
		p2 = new  JPanel();
		room_chat_tf_n_sendbt_jPanel = new  JPanel();
		chatRoom_tf = new  JTextField();
		chatSend_bt = new  JButton();
		inroom_member_list_jPanel = new  JPanel();
		inroom_member_list_jscrPane = new  JScrollPane();
		chatRoom_list = new  JList();
		room_member_jLabel = new  JLabel();
		chatRoomExit_bt = new  JButton();
		roomchat_ta_jPanel = new  JPanel();
		roomchat_ta_jscrPane = new  JScrollPane();
		chatRoom_ta = new  JTextArea();
		///
		timer_Label = new JLabel();
		quiz_cmt_lb = new JLabel();
		hint1_bt= new JButton();
		hint2_bt= new JButton();
		hint3_bt= new JButton();
		hint1_Label= new JLabel();
		hint2_Label= new JLabel();
		hint3_Label= new JLabel();
		game_start_bt= new JButton();
		quiz_jPanel= new JPanel();
		hint_jPanel= new JPanel();

		///////////////////////////
		//        setDefaultCloseOperation( WindowConstants.DO_NOTHING_ON_CLOSE);
		//        setDefaultCloseOperation( WindowConstants.DISPOSE_ON_CLOSE); //
		//        setDefaultCloseOperation( WindowConstants.EXIT_ON_CLOSE);//
		//It doesnt work... what is this for

		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				close(); //window close also like exit lounge
				dispose();
			}
		});


		getContentPane().setLayout(new CardLayout());

		///////////////////////lounge layout
		p1.setLayout(new BorderLayout());

		lounge_btns_n_userlist_jPanel.setLayout(new BorderLayout());

		lounge_btns_jPanel.setLayout(new GridLayout(4, 1));

		makeRoom_bt.setText("makeroom");
		makeRoom_bt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				makeRoom();
			}
		});
		lounge_btns_jPanel.add(makeRoom_bt);

		enterRoom_bt.setText("enterroom");
		enterRoom_bt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				enterRoom();
			}
		});

		lounge_btns_jPanel.add(enterRoom_bt);

		exit_bt.setText("exit");
		exit_bt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				close();
			}
		});
		lounge_btns_jPanel.add(exit_bt);

		lounge_btns_n_userlist_jPanel.add(lounge_btns_jPanel, BorderLayout.SOUTH);

		lounge_user_jLabel.setHorizontalAlignment( SwingConstants.CENTER);
		lounge_user_jLabel.setText("[Lounge user]");
		lounge_btns_n_userlist_jPanel.add(lounge_user_jLabel, BorderLayout.PAGE_START);

		jList_name.setToolTipText("");//""
		jList_name.setFixedCellWidth(100);
		namelist_jscrPane.setViewportView(jList_name);

		lounge_btns_n_userlist_jPanel.add(namelist_jscrPane, BorderLayout.CENTER);

		p1.add(lounge_btns_n_userlist_jPanel, BorderLayout.LINE_END);

		roomlist_jPanel.setLayout(new BorderLayout());

		jLabel_roomlist.setHorizontalAlignment(SwingConstants.CENTER);
		jLabel_roomlist.setText("[Room list]");
		roomlist_jPanel.add(jLabel_roomlist, BorderLayout.PAGE_START);

		jList_room.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				jList_roomMouseClicked(evt);
			}
		});
		roomlist_jscrPane.setViewportView(jList_room);

		roomlist_jPanel.add(roomlist_jscrPane, BorderLayout.CENTER);

		p1.add(roomlist_jPanel, BorderLayout.NORTH);

		////////////////

		loungChat_tf_bt_Panel.setLayout(new BorderLayout());

		loungeChat_tf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sendLoungeChat();
			}
		});
		loungChat_tf_bt_Panel.add(loungeChat_tf, BorderLayout.CENTER);

		loungeChatSend_bt.setText("send");
		loungeChatSend_bt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sendLoungeChat();
			}
		});
		loungChat_tf_bt_Panel.add(loungeChatSend_bt, BorderLayout.EAST);

		p1.add(loungChat_tf_bt_Panel, BorderLayout.PAGE_END);


		loungChatPanel.setLayout(new BorderLayout());
		loungeChat_ta.setColumns(8);
		loungeChat_ta.setRows(5);
		loungeChat_ta.setEditable(false);
		loungeChatScrollPane.setViewportView(loungeChat_ta);
		loungChatPanel.add(loungeChatScrollPane, BorderLayout.CENTER);

		p1.add(loungChatPanel, BorderLayout.CENTER);

		getContentPane().add(p1, "lounge");

		pack();
		
		//////////////////////////////////////////////////room
		p2.setLayout(new BorderLayout());

		JPanel p2_center_jPanel = new JPanel(new BorderLayout());
		
		quiz_jPanel.setLayout(new BorderLayout());
		
	
		
		timer_Label.setText("-Initial Game-");
		quiz_cmt_lb.setText("10seconds for one quiz - quiz/cmt location");
		quiz_cmt_lb.setHorizontalAlignment(SwingConstants.CENTER);
		quiz_cmt_lb.setVerticalAlignment(SwingConstants.CENTER);

		
		game_start_bt.setText("Start");
		game_start_bt.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				startGame();
				
			}
		});
		
		quiz_jPanel.add(timer_Label, BorderLayout.LINE_START);
		quiz_jPanel.add(quiz_cmt_lb, BorderLayout.CENTER);
		quiz_jPanel.add(game_start_bt, BorderLayout.EAST);
		
		
		hint_jPanel.setLayout(new BorderLayout());
		
		JPanel hint_bt_jPanel = new JPanel(new GridLayout(3,1));
		JPanel hint_lb_jPanel = new JPanel(new GridLayout(3,1));
		
		hint1_bt.setText("Hint 1");
		hint1_bt.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				hint1_Label.setVisible(true);
				hint2_bt.setEnabled(true);
			
			}
		});
		
		hint2_bt.setText("Hint 2");
		hint2_bt.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				hint2_Label.setVisible(true);
				hint3_bt.setEnabled(true);
				//hint2 占쏙옙 占쏙옙占싱깍옙
			}
		});
		
		hint3_bt.setText("Answer");
		
		hint3_bt.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				hint3_Label.setVisible(true);
				//answer 占쏙옙 占쏙옙占싱깍옙
			}
		});
		
		hint_bt_jPanel.add(hint1_bt);
		hint_bt_jPanel.add(hint2_bt);
		hint_bt_jPanel.add(hint3_bt);
		
		hint1_Label.setText("Here is for hint1");
		hint1_Label.setHorizontalAlignment(SwingConstants.LEFT);
//		hint1_Label.setVisible(false);
		hint2_Label.setText("Here is for hint2");
		hint2_Label.setHorizontalAlignment(SwingConstants.LEFT);
//		hint2_Label.setVisible(false);
		hint3_Label.setText("Here is for hint3");
		hint3_Label.setHorizontalAlignment(SwingConstants.LEFT);
//		hint3_Label.setVisible(false);
		
		hint_lb_jPanel.add(hint1_Label);
		hint_lb_jPanel.add(hint2_Label);
		hint_lb_jPanel.add(hint3_Label);
		
		hint_jPanel.add(hint_bt_jPanel, BorderLayout.LINE_START);
		hint_jPanel.add(hint_lb_jPanel, BorderLayout.CENTER);
		
		p2_center_jPanel.add(quiz_jPanel,BorderLayout.CENTER);
		p2_center_jPanel.add(hint_jPanel,BorderLayout.SOUTH);
		
		p2.add(p2_center_jPanel, BorderLayout.CENTER);
		
		//////
		room_chat_tf_n_sendbt_jPanel.setLayout(new BorderLayout());

		chatRoom_tf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sendChat();
			}
		});
		room_chat_tf_n_sendbt_jPanel.add(chatRoom_tf, BorderLayout.CENTER);

		chatSend_bt.setText("chatsend");
		chatSend_bt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sendChat();
			}
		});
		room_chat_tf_n_sendbt_jPanel.add(chatSend_bt, BorderLayout.EAST);

		p2.add(room_chat_tf_n_sendbt_jPanel, BorderLayout.PAGE_END);

		inroom_member_list_jPanel.setLayout(new BorderLayout());

		chatRoom_list.setFixedCellWidth(70);
		inroom_member_list_jscrPane.setViewportView(chatRoom_list);

		inroom_member_list_jPanel.add(inroom_member_list_jscrPane, BorderLayout.CENTER);

		room_member_jLabel.setHorizontalAlignment(SwingConstants.CENTER);
		room_member_jLabel.setText("[Room member]");
		inroom_member_list_jPanel.add(room_member_jLabel, BorderLayout.PAGE_START);

		chatRoomExit_bt.setText("chatroomexit");
		chatRoomExit_bt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				chatRoomExit();
			}
		});
		inroom_member_list_jPanel.add(chatRoomExit_bt, BorderLayout.PAGE_END);


		roomchat_ta_jPanel.setLayout(new BorderLayout());
		chatRoom_ta.setColumns(30);
		chatRoom_ta.setRows(5);
		chatRoom_ta.setEditable(false);
		roomchat_ta_jscrPane.setViewportView(chatRoom_ta);
		roomchat_ta_jPanel.add(roomchat_ta_jscrPane, BorderLayout.CENTER);

		JPanel p2_upper_jPanel = new JPanel(new BorderLayout());
		p2_upper_jPanel.add(inroom_member_list_jPanel, BorderLayout.LINE_END);
		p2_upper_jPanel.add(roomchat_ta_jPanel, BorderLayout.CENTER);
		p2.add(p2_upper_jPanel, BorderLayout.PAGE_START);
		

		getContentPane().add(p2, "GameRoom");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void makeRoom() {
		String roomname = null;

		while(true) {
			roomname = JOptionPane.showInputDialog(this, "roomname :");
	
//			if(roomname.JOptionPane.CANCEL_OPTION){System.out.println(roomname);}
//			if(Integer.parseInt(roomname) == JOptionPane.CLOSED_OPTION){System.out.println(roomname);}
//			what the..... this dialog cannot be calceled or closed
			
			if(roomname == null || roomname.trim().length() < 1) {
				JOptionPane.showMessageDialog(this, "Fill out proper roomname");
			}else {break;}
		}
		if(roomname != null) {
			System.out.println("room created : "+roomname);
			card.show(getContentPane(), "GameRoom");

			Protocol p = new Protocol();
			p.setCmd(4);
			p.setMsg(roomname.trim());

			try {
				out.writeObject(p);//
			} catch (Exception e) {}
		}
	}



	private void chatRoomExit() {
		Protocol p = new Protocol();
		p.setCmd(6);

		chatRoom_ta.setText("");
		chatRoom_tf.setText("");

		loungeChat_ta.setText("");
		loungeChat_tf.setText("");

		card.show(getContentPane(), "lounge"); 

		try {
			out.writeObject(p); //
		} catch (Exception e) {}

	}


	private void jList_roomMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jList_roomMouseClicked
		if(evt.getClickCount() == 2){ //
			enterRoom();
		}
	}//GEN-LAST:event_jList_roomMouseClicked

	private void enterRoom(){ //enter a room already made

		Protocol p = new Protocol();
		p.setCmd(5);    // 

		int index = jList_room.getSelectedIndex();

		if(index == -1){    
			return;
		}

		card.show(getContentPane(), "GameRoom");

		p.setIndex(index);

		try {
			out.writeObject(p);
		} catch (Exception e) {}
	}

	private void sendLoungeChat(){ //lounge chat

		Protocol p = new Protocol();
		p.setCmd(0);

		String msg = loungeChat_tf.getText();
		p.setMsg(msg);

		try {
			out.writeObject(p);
		} catch (Exception e) {
		}

		loungeChat_tf.setText("");
	}

	private void sendChat(){ //chat in a room

		Protocol p = new Protocol();
		p.setCmd(3);

		String msg = chatRoom_tf.getText();
		p.setMsg(msg);

		try {
			out.writeObject(p);
		} catch (Exception e) {
		}

		chatRoom_tf.setText("");
	}

	private void close(){//exit from lounge = close the window and end the program
		try {
			Protocol p = new Protocol();
			p.setCmd(2);
			out.writeObject(p);
		} catch (IOException ex) {}
	}

	private void enter(){  //enter to the lounge
		String str = null;
		boolean duplication = false;

		while(true) {
			
			str = JOptionPane.showInputDialog(this, "Nickname :");
			
			
			if(str.trim().length()<=0) {
				JOptionPane.showMessageDialog(this, "Fill out with a proper nickname");
			}else {break;} 
		}
		if(str!=null) {
			connected();

			thr = new Thread(this);
			thr.start();

			try {
				Protocol p = new Protocol();
				p.setCmd(1);
				p.setMsg(str);

				out.writeObject(p);
			} catch (Exception e) {}
		}
	}

	private void startGame(){  //this method is not fully implemented
		//need to be made up functions to work
		Protocol p = new Protocol();
		p.setCmd(7);

		try {
			out.writeObject(p);
		
		} catch (IOException ex) {}
		
		System.out.println("스타트 버튼을 눌러서 프로토콜 보냄");
	}


	public static void main(String args[]) {

		new ChatClient().setVisible(true); //the same performance.. ui difference with look&feel.....fxxx u complicated functions..

	}
	// Variables declaration

	/////
	private JLabel timer_Label;
	private JLabel quiz_cmt_lb;
	private JButton hint1_bt;
	private JButton hint2_bt;
	private JButton hint3_bt;
	private JLabel hint1_Label;
	private JLabel hint2_Label;
	private JLabel hint3_Label;
	private JButton game_start_bt;
	private JPanel quiz_jPanel;
	private JPanel hint_jPanel;
	///
	private  JButton chatRoomExit_bt;
	private  JList chatRoom_list;
	private  JTextArea chatRoom_ta;
	private  JTextArea loungeChat_ta;
	private  JTextField loungeChat_tf;
	private  JTextField chatRoom_tf;
	private  JButton chatSend_bt;
	private  JButton loungeChatSend_bt;
	private  JButton enterRoom_bt;
	private  JButton enter_bt;
	private  JButton exit_bt;
	private  JLabel jLabel_roomlist;
	private  JLabel lounge_user_jLabel;
	private  JLabel room_member_jLabel;
	private  JList jList_name;
	private  JList jList_room;
	private  JPanel lounge_btns_n_userlist_jPanel;
	private  JPanel roomlist_jPanel;
	private  JPanel lounge_btns_jPanel;
	private  JPanel room_chat_tf_n_sendbt_jPanel;
	private  JPanel inroom_member_list_jPanel;
	private  JPanel roomchat_ta_jPanel;
	private  JPanel loungChatPanel;
	private  JPanel loungChat_tf_bt_Panel;
	private  JScrollPane roomlist_jscrPane;
	private  JScrollPane namelist_jscrPane;
	private  JScrollPane inroom_member_list_jscrPane;
	private  JScrollPane roomchat_ta_jscrPane;
	private  JScrollPane loungeChatScrollPane;
	private  JButton makeRoom_bt;
	private  JTextField nickName_tf;
	private  JPanel p1;
	private  JPanel p2;
	// End of variables declaration

	private void connected() {

		// 
		try {
			sock = new Socket(serverIP, port);

			if(sock.isConnected()){
				card.show(getContentPane(), "lounge");
				out = new ObjectOutputStream(sock.getOutputStream());
				in = new ObjectInputStream(sock.getInputStream());
				setTitle("Welcome!");
			}

		} catch(IOException e){
			setTitle("end welcome");
			System.out.println("client socket connection failed");
		} 
	}

	@Override
	public void run() {
		boolean repeat = true;
		while(repeat){
			try {
				Protocol p = (Protocol) in.readObject();
				
				
				System.out.println("String value from prtc : "+p.getMsg());
				switch(p.getCmd()){
				case 0: //lounge chat
					loungeChat_ta.append(p.getFromUser()+":"+p.getMsg()+"\n"); 
					break;
				case 1: //lounge in
					jList_name.setListData(p.getUser_name());
					jList_room.setListData(p.getRoom_name());
					break;  
				case 2: //   lounge out
					repeat = false;
					dispose();
					break;
				case 3:   //room chat
					chatRoom_ta.append(p.getFromUser()+":"+p.getMsg()+"\n");
					
					String userans = p.getMsg().trim().replace(" ", "");
					String realans = hint3_Label.getText().trim().replace(" ", "");
				
					
					if(userans.equals(realans)){
						
						p.setCmd(9);
						
						p.setPoint(3);
						if(hint1_Label.isVisible()){p.setPoint(2);}
						if(hint2_Label.isVisible()){p.setPoint(1);}
						if(hint3_Label.isVisible()){p.setPoint(0);}
						
						out.writeObject(p);
						
					}
					
					break;
					
				case 5: // room enter... not making
					chatRoom_ta.append(p.getMsg()+"\n");
					chatRoom_list.setListData(p.getUser_name());
					break;
					//4 -> im the one who made room... don't need to get some msg from ptcl
				case 6:
					chatRoom_ta.append(p.getMsg()+"\n");
					chatRoom_list.setListData(p.getUser_name());
					break;
				case 7: //game start.... lets think about how to get the quiz... the game is only exist in A room.
					
					chatRoom_ta.append(p.getFromUser()+"님이 게임을 시작합니다\n");
				
					break;
					
				case 8: //and here matches the answer..... with Msg; && ofcourse hiding hints.. && point too..

					quiz_cmt_lb.setText(p.getQuizLine()[0]+p.getQuizLine()[1]);
					hint1_Label.setText(p.getQuizLine()[2]);
					hint2_Label.setText(p.getQuizLine()[3]);
					hint3_Label.setText(p.getQuizLine()[4]);
					
					hint2_bt.setEnabled(false);
					hint3_bt.setEnabled(false);
					
					hint1_Label.setVisible(false);
					hint2_Label.setVisible(false);
					hint3_Label.setVisible(false);
					
						
					break;
					
				
				}
			} catch (Exception e) {}
		}

		try {
			if(in != null)
				in.close();
			if(out != null)
				out.close();
			if(sock != null)
				sock.close();

			System.out.println("client sock/stream close");
			this.setTitle("Goob bye~");
		} catch (Exception e) {}

		if(finish){
			System.out.println("System exit");
			dispose();
		}
	}
}
